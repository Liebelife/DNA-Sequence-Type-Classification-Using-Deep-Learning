Some weights of the model checkpoint at /home/lieberze/DP/Thesis/05_model_training/roberta-trained-new-tokenizer_ were not used when initializing RobertaModelWithHeads: ['lm_head.layer_norm.bias', 'lm_head.dense.weight', 'lm_head.layer_norm.weight', 'lm_head.bias', 'lm_head.dense.bias']
- This IS expected if you are initializing RobertaModelWithHeads from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing RobertaModelWithHeads from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
Some weights of RobertaModelWithHeads were not initialized from the model checkpoint at /home/lieberze/DP/Thesis/05_model_training/roberta-trained-new-tokenizer_ and are newly initialized: ['roberta.pooler.dense.weight', 'roberta.pooler.dense.bias']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
total_optimization_steps: 19
how many 'eval_steps' to set: 2
how many steps in each evaluation stop: 2
hence in total: 4 steps for the whole evaluation
***** Running training *****
  Num examples = 900
  Num Epochs = 1
  Instantaneous batch size per device = 16
  Total train batch size (w. parallel, distributed & accumulation) = 48
  Gradient Accumulation steps = 1
  Total optimization steps = 19
Automatic Weights & Biases logging enabled, to disable set os.environ["WANDB_DISABLED"] = "true"
/home/lieberze/.conda/envs/dp/lib/python3.6/site-packages/torch/nn/parallel/_functions.py:68: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.
  warnings.warn('Was asked to gather along dimension 0, but all '
***** Running Evaluation *****
  Num examples = 100
  Batch size = 48
***** Running Evaluation *****
  Num examples = 100
  Batch size = 48
***** Running Evaluation *****
  Num examples = 100
  Batch size = 48
***** Running Evaluation *****
  Num examples = 100
  Batch size = 48
***** Running Evaluation *****
  Num examples = 100
  Batch size = 48
***** Running Evaluation *****
  Num examples = 100
  Batch size = 48
***** Running Evaluation *****
  Num examples = 100
  Batch size = 48
***** Running Evaluation *****
  Num examples = 100
  Batch size = 48
***** Running Evaluation *****
  Num examples = 100
  Batch size = 48
{'eval_runtime': 0.2356, 'eval_samples_per_second': 424.389, 'eval_steps_per_second': 12.732, 'epoch': 1.0}
1.0514883744089227
 TrainOutput(global_step=19, training_loss=1.0514883744089227, metrics={'train_runtime': 34.0293, 'train_samples_per_second': 26.448, 'train_steps_per_second': 0.558, 'total_flos': 30523062297600.0, 'train_loss': 1.0514883744089227, 'epoch': 1.0})
0
2
2
2
2
0
2
0
0
2
2
2
0
0
2
2
2
2
2
1
2
2
0
0
2
2
0
0
2
2
0
2
2
2
2
2
2
2
0
2
1
2
2
2
2
0
0
1
1
2
0
0
2
2
0
2
2
0
2
1
2
0
0
0
2
2
2
2
2
2
2
2
2
2
1
2
0
2
2
0
0
2
2
2
2
0
2
2
0
2
0
0
1
2
2
0
2
2
0
2
{'input_ids': tensor([[   0,   43,  344,  ...,    1,    1,    1],
        [   0,   56,  781,  ...,    1,    1,    1],
        [   0, 4673,  542,  ...,    1,    1,    1],
        ...,
        [   0, 3927,  390,  ...,    1,    1,    1],
        [   0,  360,  640,  ...,    1,    1,    1],
        [   0, 1543,  392,  ...,    1,    1,    1]]), 'attention_mask': tensor([[1, 1, 1,  ..., 0, 0, 0],
        [1, 1, 1,  ..., 0, 0, 0],
        [1, 1, 1,  ..., 0, 0, 0],
        ...,
        [1, 1, 1,  ..., 0, 0, 0],
        [1, 1, 1,  ..., 0, 0, 0],
        [1, 1, 1,  ..., 0, 0, 0]]), 'labels': tensor([2, 1, 2, 2, 2, 0, 2, 2, 0, 1, 2, 2, 0, 0, 1, 2, 0, 2, 0, 1, 2, 0, 0, 0,
        2, 1, 0, 2, 2, 0, 0, 0, 1, 1, 2, 1, 2, 1, 0, 0, 2, 1, 0, 2, 0, 0, 0, 1])}
Training completed. Do not forget to share your model on huggingface.co/models =)
***** Running Evaluation *****
  Num examples = 100
  Batch size = 48
Saving model checkpoint to 3x3_CV
Configuration saved in 3x3_CV/3x3_fold_0/adapter_config.json
Module weights saved in 3x3_CV/3x3_fold_0/pytorch_adapter.bin
Configuration saved in 3x3_CV/3x3_fold_0/head_config.json
Module weights saved in 3x3_CV/3x3_fold_0/pytorch_model_head.bin
Configuration saved in 3x3_CV/3x3_fold_0/head_config.json
Module weights saved in 3x3_CV/3x3_fold_0/pytorch_model_head.bin
Configuration saved in 3x3_CV/3x3_fold_0/head_config.json
Module weights saved in 3x3_CV/3x3_fold_0/pytorch_model_head.bin
***** Running Prediction *****
  Num examples = 100
  Batch size = 48
***** Running Prediction *****
  Num examples = 100
  Batch size = 48
***** Running Evaluation *****
  Num examples = 100
  Batch size = 48